import os
import json
import glob
import papermill as pm
from datetime import datetime
from flask import Flask, request, render_template, redirect, url_for, flash

app = Flask(__name__)
app.secret_key = 'secret_key'  # Needed for flash messages

# Directories where JSON outputs are stored
ANALYSIS_FOLDER = os.path.join(os.getcwd(), 'analysis')
DCF_FOLDER = os.path.join(os.getcwd(), 'dcf')
DATA_FOLDER = os.path.join(os.getcwd(), 'data')
TRANSCRIPTS_FOLDER = os.path.join(os.getcwd(), 'transcripts')

def run_analysis(ticker: str) -> bool:
    """
    Runs the parameterized analysis notebook using Papermill with the given ticker.
    Returns True if executed without error.
    """
    try:
        pm.execute_notebook(
            'analyze_stock.ipynb',
            None,
            parameters={'ticker': ticker}
        )
        return True
    except Exception as e:
        print(f"Error running analysis notebook: {e}")
        return False

def load_analysis_data(ticker: str) -> dict:
    """
    Loads the JSON analysis data from the file generated by the analysis notebook.
    Returns an empty dictionary if the file does not exist.
    """
    json_path = os.path.join(ANALYSIS_FOLDER, f'{ticker}.json')
    if os.path.exists(json_path):
        with open(json_path, 'r') as f:
            return json.load(f)
    return {}

def run_dcf(ticker: str, fcf_ps: float, growth_rate: float,
            terminal_multiple: float, years: int, cash: float,
            debt: float, shares: float) -> bool:
    """
    Runs the DCF notebook using Papermill with the given parameters.
    Returns True if executed without error.
    """
    try:
        pm.execute_notebook(
            'dcf.ipynb',
            None,
            parameters={
                'ticker': ticker,
                'fcf_ps': fcf_ps,
                'growth_rate': growth_rate,
                'terminal_multiple': terminal_multiple,
                'years': years,
                'cash': cash,
                'debt': debt,
                'shares': shares
            }
        )
        return True
    except Exception as e:
        print(f"Error running dcf notebook: {e}")
        return False

def load_dcf_data(ticker: str) -> dict:
    """
    Loads the JSON DCF data from the file produced by the DCF notebook.
    Returns an empty dictionary if the file does not exist.
    """
    json_path = os.path.join(DCF_FOLDER, f'{ticker}.json')
    if os.path.exists(json_path):
        with open(json_path, 'r') as f:
            return json.load(f)
    return {}

def run_transcripts(ticker: str) -> bool:
    """
    Runs the transcripts notebook using Papermill for the given ticker.
    The notebook expects a parameter 'ticker_list'.
    """
    try:
        pm.execute_notebook(
            'transcripts.ipynb',
            None,
            parameters={'ticker_list': [ticker]}
        )
        return True
    except Exception as e:
        print(f"Error running transcripts notebook: {e}")
        return False

def load_transcript_data(ticker: str) -> dict:
    """
    Searches the transcripts folder for files with the naming convention:
      {ticker}_YYYY-MM-DD_transcript.json
    Loads and returns a list of transcript dictionaries, sorted by date (newest first).
    """
    pattern = os.path.join(TRANSCRIPTS_FOLDER, f"{ticker}_*_transcript.json")
    files = glob.glob(pattern)
    transcript_list = []
    for filename in files:
        try:
            with open(filename, 'r') as f:
                data = json.load(f)
                # Ensure a date key exists; otherwise, skip this file.
                if "date" in data:
                    transcript_list.append(data)
        except Exception as e:
            print(f"Error loading transcript file {filename}: {e}")
    # Sort transcripts by date descending
    transcript_list.sort(key=lambda x: datetime.strptime(x.get('date', '1900-01-01'), '%Y-%m-%d'), reverse=True)
    return transcript_list

def delete_cache_files(ticker: str):
    """
    Deletes cached JSON files for the given ticker from the data folder.
    Expected filenames: {ticker}_balance_sheet.json, {ticker}_cash_flow.json, {ticker}_income_statement.json
    """
    filenames = [
        f"{ticker}_balance_sheet.json",
        f"{ticker}_cash_flow.json",
        f"{ticker}_income_statement.json"
    ]
    for filename in filenames:
        file_path = os.path.join(DATA_FOLDER, filename)
        if os.path.exists(file_path):
            try:
                os.remove(file_path)
                print(f"Deleted cache file: {file_path}")
            except Exception as e:
                print(f"Error deleting {file_path}: {e}")

@app.route('/', methods=['GET', 'POST'])
def index():
    if request.method == 'POST':
        ticker = request.form.get('ticker', '').upper().strip()
        if not ticker:
            flash('Ticker symbol is required.')
            return redirect(url_for('index'))

        # Run the analysis notebook
        if not run_analysis(ticker):
            flash('There was an error running the analysis.')
            return redirect(url_for('index'))

        # Load the analysis data
        metrics = load_analysis_data(ticker)
        if not metrics:
            flash('Analysis data not found. Please try again.')
            return redirect(url_for('index'))

        # Run transcripts notebook and load transcript data
        if not run_transcripts(ticker):
            flash('There was an error running the transcripts analysis.')
            transcript_data = {}
        else:
            transcript_data = load_transcript_data(ticker)

        # Render the result page with analysis, dcf (empty), and transcripts.
        return render_template('result.html', ticker=ticker, metrics=metrics, 
                               dcf_results=None, dcf_params=None, transcript_data=transcript_data)

    return render_template('index.html')

@app.route('/compute_dcf', methods=['POST'])
def compute_dcf():
    """
    Route to run the DCF notebook with parameters supplied via the form on the result page.
    After executing the DCF analysis, the DCF results are loaded and the result page is re-rendered.
    """
    ticker = request.form.get('ticker', '').upper().strip()
    if not ticker:
        flash('Ticker symbol missing for DCF computation.')
        return redirect(url_for('index'))

    # Retrieve DCF parameters from the form.
    try:
        # Use float() conversion and default to 0 if a field is missing or invalid.
        fcf_ps = float(request.form.get('fcf_ps'))
        growth_rate = float(request.form.get('growth_rate'))
        terminal_multiple = float(request.form.get('terminal_multiple'))
        years = int(request.form.get('years'))
        cash = float(request.form.get('cash'))
        debt = float(request.form.get('debt'))
        shares = float(request.form.get('shares'))
    except Exception as e:
        flash(f'Error parsing DCF parameters: {e}')
        return redirect(url_for('index'))

    # Run the DCF notebook.
    if not run_dcf(ticker, fcf_ps, growth_rate, terminal_multiple, years, cash, debt, shares):
        flash('Error computing DCF. Please try again.')
        return redirect(url_for('index'))

    # Load data to display.
    metrics = load_analysis_data(ticker)
    dcf_results = load_dcf_data(ticker)
    transcript_data = load_transcript_data(ticker)

    # Build a dictionary of parameters to pre-fill the form.
    dcf_params = {
        'fcf_ps': fcf_ps,
        'growth_rate': growth_rate,
        'terminal_multiple': terminal_multiple,
        'years': years,
        'cash': cash,
        'debt': debt,
        'shares': shares,
    }

    return render_template('result.html', ticker=ticker, metrics=metrics, 
                       dcf_results=dcf_results, dcf_params=dcf_params, transcript_data=transcript_data)

@app.route('/reset_cache', methods=['POST'])
def reset_cache():
    """
    Route to reset the cache for a given ticker by deleting cached JSON files,
    re-running the analysis notebook, and reloading the result page.
    """
    ticker = request.form.get('ticker', '').upper().strip()
    if not ticker:
        flash('Ticker symbol missing for cache reset.')
        return redirect(url_for('index'))

    # Delete cached files from the data folder.
    delete_cache_files(ticker)

    # Re-run the analysis notebook.
    if not run_analysis(ticker):
        flash('Error re-running analysis after cache reset.')
        return redirect(url_for('index'))

    metrics = load_analysis_data(ticker)
    if not metrics:
        flash('Analysis data not found after cache reset.')
        return redirect(url_for('index'))

    return render_template('result.html', ticker=ticker, metrics=metrics, dcf_results=None, dcf_params=None)

if __name__ == '__main__':
    app.run(debug=True)
